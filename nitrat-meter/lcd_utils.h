void LcdAnim (void);                     //Функция вывода аннимации в виде заполняющейся шкалы процесса замера
void lcd_OutInt(bool gash, unsigned int data, uint8_t l, uint8_t r);//Функция вывода (r+l)-значн.числа типа unsigned int с гаш.незнач.нуля с текущей позиции
void lcd_OutIntBuf(bool gash, unsigned int data, uint8_t l, uint8_t r, bool act);//Функция вывода (r+l)-значн.числа типа unsigned int в буфер с гаш.незнач.нуля
void LcdNadp_10 (unsigned char n);       //Функция вывода надписи из 10 символов из массива nadp_10 с текущей позиции
void LcdNadp_8 (unsigned char n);        //Функция вывода надписи из 8 символов из массива nadp_8 с текущей позиции
void LcdNadp_6 (unsigned char n);        //Функция вывода надписи из 6 символов из массива nadp_6 с текущей позиции
void LcdNadp_4 (unsigned char n);        //Функция вывода надписи из 4 символов из массива nadp_4 с текущей позиции


/*-----Функция вывода надписи из 10 символов из массива nadp_10 с текущей позиции----*/
void LcdNadp_10 (unsigned char n)
//n-номер строки в массиве
{ unsigned char i=0;                     //Счетчик символов надписи
  while (i<10)                           //Вывод строки посимвольно
  { lcd_OutChar(pgm_read_byte(&nadp_10[n][i]));
    i++;
  }
  return;
}
//
/*-----Функция вывода надписи из 8 символов из массива nadp_8 с текущей позиции----*/
void LcdNadp_8 (unsigned char n)
//n-номер строки в массиве
{ unsigned char i=0;                     //Счетчик символов надписи
  while (i<8)                            //Вывод строки посимвольно
  { lcd_OutChar(pgm_read_byte(&nadp_8[n][i]));
    i++;
  }
  return;
}
//
/*-----Функция вывода надписи из 6 символов из массива nadp_6 с текущей позиции----*/
void LcdNadp_6 (unsigned char n)
//n-номер строки в массиве
{ unsigned char i=0;                     //Счетчик символов надписи
  while (i<6)                            //Вывод строки посимвольно
  { lcd_OutChar(pgm_read_byte(&nadp_6[n][i]));
    i++;
  }
  return;
}
//
/*-----Функция вывода надписи из 4 символов из массива nadp_4 с текущей позиции----*/
void LcdNadp_4 (unsigned char n)
//n-номер строки в массиве
{ unsigned char i=0;                     //Счетчик символов надписи
  while (i<4)                            //Вывод строки посимвольно
  { lcd_OutChar(pgm_read_byte(&nadp_4[n][i]));
    i++;
  }
}
//
/*-----Функция вывода анимации в виде заполняющейся шкалы процесса замера-----*/
void LcdAnim() {
	unsigned char per=0;                   //Счетчик процентов заполнения
	//Стирание предыдущих надписей
	lcd_GotoXY(6, 1);                   //x=6, y=1
	LcdStr("        ");                    //8 пробелов
	//Вывод анимации
	for (uint8_t per = 0; per < 100; per += 2) {
		LcdBar(42, 9, 83, 13, per);          //Рисование прогресс-бара и заполнения его на "процент"
		LcdUpdate();                         //Вывод информации в дисплей
	}
}
//
/**
 * Функция вывода (r+l)-значн.числа типа unsigned int с гаш.незнач.нуля с текущей позиции
*/
void lcd_OutInt(bool gash, unsigned int data, uint8_t l, uint8_t r) {
/*gash=0 - нет гашения, 1 - гашение 1-го незнач.нуля слева,
  data - число; l - число выводимых цифр слева, r - справа от запятой)
*/
	lcd_OutIntBuf(gash, data, l, r, 0);
	LcdString();                           //Вывод строки из текстового буфера с текущей позиции
}

/**
 * Функция вывода (r+l)-значн.числа типа unsigned int в буфер с гаш.незнач.нуля
 *
	gash=0 - нет гашения, 1 - гашение 1-го незнач.нуля слева,
	data - число; l - число выводимых цифр слева, r - справа от запятой)
	act=false - обычная индикация, act=trus - с миганием активного пункта *
 **/
void lcd_OutIntBuf(bool gash, unsigned int data, uint8_t l, uint8_t r, bool act)
/*
*/
{ unsigned int i=0;                      //Счетчик выводимых разрядов
  unsigned char c=1;                     //Счетчик разрядов текстового буфера
  unsigned int x=1;                      //Степень множителя
  unsigned char mig=1;                   //Признак мигания надписи
  unsigned char dat;                     //Вспомогательная переменная
  clean_lcd_buf();                       //Очистка текстового буфера
  if ((b==0)&&(t_026sec>1)&&(act==1))    //Если разрешено мигание надписи и фаза гашения надписи акт.пункта
  { mig=0;                               //Признак фазы гашения
  }
  for (i=0; i<(l+r-1); i++)
  { x=x*10;                              //Вычисл. 10 в степени (l+r-1)
  }
  i=l+r-1;                               //Счетчик выводимых разрядов
//Вывод первого разряда
  if (((data/x)==0)&&(l>1)&&(gash>0))    //Если гашение незначащего нуля
  { lcd_buf[0]=' ';                      //Вывод пробела в текстовый буфер
  }
  else
  { if (mig==0)                          //Если разрешено мигание надписи и фаза гашения надписи
    { lcd_buf[0]=' ';                    //Вывод пробела " "
    }
    else lcd_buf[0]=data/x+0x30;         //Иначе - вывод первой цифры старшего разряда
    gash=0;                              //Если была выведена цифра, дальнейшее гашение нулей не требуется
  }
  x=x/10;                                //Понижение степени множителя
  if (gash>0) gash--;                    //Декремент числа гасящих нулей
  while (i!=0)                           //Цикл вывода оставшихся разрядов
  { if ((i==r)&&(r>0))                   //Если вывод разделительной точки
    { if (mig==0)                        //Если разрешено мигание надписи и фаза гашения надписи
      { dat=' ';                         //Вывод пробела " "
      }
      else
      { dat='.';                         //Иначе вывод разделительной запятой
      }
      lcd_buf[c]=dat;                    //Вывод байта данных в буфер
      c++;                               //Инкремент счетчика разрядов текстового буфера
      r++;                               //Изменение r для исключения повтора
    }
    else                                 //Иначе вывод цифры
    { if (mig==0)                        //Если разрешено мигание надписи и фаза гашения надписи
      { lcd_buf[c]=' ';                  //Вывод пробела " "
      }
      else
      { dat=(data/x)%10;                 //Вычислние цифры очередного разряда
        if ((dat==0)&&(gash>0))          //Если цифра=0 и нужно гашение
        { dat=' ';                       //Пробел
        }
        else
        { dat=dat+0x30;                  //Иначе вывод цифры очередного разряда
          gash=0;                        //Если была выведена цифра, дальнейшее гашение нулей не требуется
        }
        lcd_buf[c]=(dat);                //Вывод байта данных в буфер
      }
      x=x/10;                            //Понижение степени множителя
      if (gash>0) gash--;                //Декремент числа гасящих нулей
      i--;                               //Декремент счетчика разрядов
      c++;                               //Инкремент счетчика разрядов текстового буфера
    }
  }
}
